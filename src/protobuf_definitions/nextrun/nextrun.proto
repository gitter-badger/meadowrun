// See src/nextrun/client.py:NextRunClientAsync for docstrings

syntax = "proto3";

package nextrun;


// Represents a folder (or folders) that presumably contain code that the nextrun server
// can access directly
message ServerAvailableFolder {
    repeated string code_paths = 1;
    string interpreter_path = 2;
}


// Represents a git repo at a specific commit. See NextRunFunctionGitRepo for docstrings
// on repo_url and interpreter_path
message GitRepoCommit {
    string repo_url = 1;

    // specifies the commit to use, will be provided to git checkout [commit] see
    // https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection
    string commit = 2;

    string interpreter_path = 3;
}


message RunPyFuncRequest {
    string request_id = 1;
    oneof deployment {
        ServerAvailableFolder server_available_folder = 2;
        GitRepoCommit git_repo_commit = 3;
        // TODO add more options here, e.g. S3 folder
    }
    string module_name = 4;
    string function_name = 5;
    bytes pickled_function_arguments = 6;
    int32 result_highest_pickle_protocol = 7;
}


message ProcessStatesRequest {
    repeated string request_ids = 1;
}


message ProcessState {
    enum ProcessStateEnum {
        DEFAULT = 0;
        REQUEST_IS_DUPLICATE = 1;
        RUN_REQUESTED = 2;
        RUNNING = 3;
        SUCCEEDED = 4;

        RUN_REQUEST_FAILED = 5;
        PYTHON_EXCEPTION = 6;
        NON_ZERO_RETURN_CODE = 7;
        CANCELLED = 8;
        UNKNOWN = 9;
        ERROR_GETTING_STATE = 10;
    }
    ProcessStateEnum state = 1;
    int32 pid = 2;
    string log_file_name = 3;
    bytes pickled_result = 4;
    int32 return_code = 5;
}

message ProcessStates {
    repeated ProcessState process_states = 1;
}


service NextRunServer {
    rpc run_py_func(RunPyFuncRequest) returns (ProcessState) {};

    rpc get_process_states(ProcessStatesRequest) returns (ProcessStates) {};
}